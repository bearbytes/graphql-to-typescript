import ts from 'typescript'
import { SchemaIR } from '../transform/SchemaIR'
import { DocumentIR } from '../transform/DocumentIR'
import { generateOperations } from './Operation'
import prettier from 'prettier'
import { generateImport } from './Import'
import { generateScalarTypeAlias } from './ScalarType'
import { ScalarTypeIR } from '../transform/ScalarTypeIR'
import { InputObjectTypeIR } from '../transform/InputObjectTypeIR'
import { generateInputObjectTypeAsInterface } from './InputObjectType'
import { generateFragment } from './Fragment'
import { VariableIR } from '../transform/VariableIR'
import { FragmentIR } from '../transform/FragmentIR'
import { OperationIR } from '../transform/OperationIR'

export async function generateCode(
  schema: SchemaIR,
  documents: DocumentIR[]
): Promise<string> {
  return await cleanup(
    [
      printHeader(),
      printScalarTypes(schema),
      printFragmentTypes(schema, documents),
      printInputTypes(schema, getUsedInputTypes(documents)),
      printOperations(schema, documents),
    ].join('\n\n')
  )
}

const sourceFile = ts.createSourceFile('', '', ts.ScriptTarget.Latest)
const printer = ts.createPrinter()
function print(t: any) {
  return printer.printNode(ts.EmitHint.Unspecified, t, sourceFile)
}

function printScalarTypes(schema: SchemaIR): string {
  return (
    '// Scalar Types\n' +
    Object.values(schema.types)
      .filter((it) => it && it.kind == 'scalar')
      .map((it) => it as ScalarTypeIR)
      .map(generateScalarTypeAlias)
      .map(print)
      .join('\n')
  )
}

function printFragmentTypes(schema: SchemaIR, documents: DocumentIR[]): string {
  const fragments = documents.reduce<FragmentIR[]>(
    (acc, document) => acc.concat(document.fragments),
    []
  )
  if (fragments.length == 0) return ''

  return (
    '// Fragment Types\n' +
    fragments
      .map((fragment) => generateFragment(schema, fragment))
      .map(print)
      .join('\n')
  )
}

function printInputTypes(
  schema: SchemaIR,
  usedInputTypes: Record<string, true>
): string {
  const inputTypes = Object.entries(schema.types)
    .map(([typename, type]) => ({ typename, type }))
    .filter((it) => it.type && it.type.kind == 'inputObject')
    .filter((it) => usedInputTypes[it.typename])

  if (inputTypes.length == 0) return ''

  return (
    '// Input Types\n' +
    inputTypes
      .map((it) => {
        return generateInputObjectTypeAsInterface(
          schema,
          it.type as InputObjectTypeIR,
          it.typename
        )
      })
      .map(print)
      .join('\n')
  )
}

function printOperations(schema: SchemaIR, documents: DocumentIR[]) {
  return (
    '// Operations\n' +
    [generateOperations(schema, documents)].map(print).join('\n')
  )
}

function printHeader() {
  return (
    '// This file is generated by a tool. All changes will be overwritten.\n' +
    [generateImport('@bearbytes/graphql-to-typescript', undefined, 'Operation')]
      .map(print)
      .join('\n')
  )
}

async function cleanup(code: string) {
  const prettierConfig = await prettier.resolveConfig(process.cwd())
  return prettier.format(code, {
    ...prettierConfig,
    parser: 'typescript',
  })
}

function getUsedInputTypes(documents: DocumentIR[]) {
  const usedInputTypes: Record<string, true> = {}

  documents
    .reduce<OperationIR[]>((acc, document) => document.operations, [])
    .reduce<VariableIR[]>(
      (acc, operation) => acc.concat(Object.values(operation.variables)),
      []
    )
    .forEach(visit)

  function visit(variable: VariableIR): void {
    if (variable.kind == 'nonNull') {
      return visit(variable.wrappedType)
    }
    if (variable.kind == 'list') {
      return visit(variable.wrappedType)
    }
    usedInputTypes[variable.typename] = true
  }
  return usedInputTypes
}
